echo "test001: Simple table"
echo "valid: The simplest possible table without metadata"
csvlint features/fixtures/csvw/test001.csv
echo
echo "test005: Identifier references"
echo "valid: A table with entity identifiers and references to other entities without metadata"
csvlint features/fixtures/csvw/test005.csv
echo
echo "test006: No identifiers"
echo "valid: Records contain two entities with relationships which are duplicated without metadata"
csvlint features/fixtures/csvw/test006.csv
echo
echo "test007: Joined table with unique identifiers"
echo "valid: Joined data with identified records without metadata"
csvlint features/fixtures/csvw/test007.csv
echo
echo "test008: Microsyntax - internal field separator"
echo "valid: One field has comma-separated values without metadata"
csvlint features/fixtures/csvw/test008.csv
echo
echo "test009: Microsyntax - formatted time"
echo "valid: Field with parseable human formatted time without metadata"
csvlint features/fixtures/csvw/test009.csv
echo
echo "test010: Country-codes-and-names example"
echo "valid: Country-codes-and-names example"
csvlint features/fixtures/csvw/test010.csv
echo
echo "test011: tree-ops example with metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test011/tree-ops.csv
echo
echo "test012: tree-ops example with directory metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test012/tree-ops.csv
echo
echo "test013: tree-ops example from user metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/tree-ops.csv --schema=features/fixtures/csvw/test013-user-metadata.json
echo
echo "test014: tree-ops example with linked metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test014/tree-ops.csv
echo
echo "test015: tree-ops example with user and directory metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test015/tree-ops.csv --schema=features/fixtures/csvw/test015/user-metadata.json
echo
echo "test016: tree-ops example with linked and directory metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test016/tree-ops.csv
echo
echo "test017: tree-ops example with file and directory metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test017/tree-ops.csv
echo
echo "test018: tree-ops example with user, file and directory metadata"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test018/tree-ops.csv --schema=features/fixtures/csvw/test018/user-metadata.json
echo
echo "test023: dialect: header=false"
echo "valid: If 'true', sets the 'header row count' flag to 1, and if 'false' to 0, unless 'headerRowCount' is provided, in which case the value provided for the 'header' property is ignored."
csvlint features/fixtures/csvw/tree-ops.csv --schema=features/fixtures/csvw/test023-user-metadata.json
echo
echo "test027: tree-ops minimal output"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/tree-ops.csv --schema=features/fixtures/csvw/test027-user-metadata.json
echo
echo "test028: countries.csv example"
echo "valid: If no metadata is supplied or found, processors MUST use embedded metadata."
csvlint features/fixtures/csvw/countries.csv
echo
echo "test029: countries.csv minimal"
echo "valid: If no metadata is supplied or found, processors MUST use embedded metadata."
csvlint features/fixtures/csvw/countries.csv
echo
echo "test030: countries.json example"
echo "valid: countries.json from metadata"
csvlint --schema=features/fixtures/csvw/countries.json
echo
echo "test031: countries.json example minimal output"
echo "valid: countries.json from metadata minimal output"
csvlint --schema=features/fixtures/csvw/countries.json
echo
echo "test032: events-listing.csv example"
echo "valid: events-listing example from metadata, virtual columns and multiple subjects per row"
csvlint --schema=features/fixtures/csvw/test032/csv-metadata.json
echo
echo "test033: events-listing.csv minimal output"
echo "valid: events-listing example from metadata, virtual columns and multiple subjects per row; minimal output"
csvlint --schema=features/fixtures/csvw/test033/csv-metadata.json
echo
echo "test034: roles example"
echo "errors: Public Sector Roles example with referenced schemas. Validation fails because organization.csv intentionally contains an invalid reference."
csvlint --schema=features/fixtures/csvw/test034/csv-metadata.json
echo
echo "test035: roles minimal"
echo "errors: Public Sector Roles example with referenced schemas; minimal output. Validation fails because organization.csv intentionally contains an invalid reference."
csvlint --schema=features/fixtures/csvw/test035/csv-metadata.json
echo
echo "test036: tree-ops-ext example"
echo "valid: tree-ops extended example"
csvlint features/fixtures/csvw/test036/tree-ops-ext.csv
echo
echo "test037: tree-ops-ext minimal"
echo "valid: tree-ops extended example; minimal output"
csvlint features/fixtures/csvw/test037/tree-ops-ext.csv
echo
echo "test038: inherited properties propagation"
echo "valid: Setting inherited properties at different levels inherit to cell"
csvlint --schema=features/fixtures/csvw/test038-metadata.json
echo
echo "test039: valid inherited properties"
echo "valid: Different combinations of valid inherited properties"
csvlint --schema=features/fixtures/csvw/test039-metadata.json
echo
echo "test040: invalid null"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test040-metadata.json
echo
echo "test041: invalid lang"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test041-metadata.json
echo
echo "test042: invalid textDirection"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test042-metadata.json
echo
echo "test043: invalid separator"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test043-metadata.json
echo
echo "test044: invalid ordered"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test044-metadata.json
echo
echo "test045: invalid default"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test045-metadata.json
echo
echo "test046: invalid dataype"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test046-metadata.json
echo
echo "test047: invalid aboutUrl"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test047-metadata.json
echo
echo "test048: invalid propertyUrl"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test048-metadata.json
echo
echo "test049: invalid valueUrl"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test049-metadata.json
echo
echo "test059: dialect: invalid commentPrefix"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test059-metadata.json
echo
echo "test060: dialect: invalid delimiter"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test060-metadata.json
echo
echo "test061: dialect: invalid doubleQuote"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test061-metadata.json
echo
echo "test062: dialect: invalid encoding"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test062-metadata.json
echo
echo "test063: dialect: invalid header"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test063-metadata.json
echo
echo "test065: dialect: invalid headerRowCount"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test065-metadata.json
echo
echo "test066: dialect: invalid lineTerminators"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test066-metadata.json
echo
echo "test067: dialect: invalid quoteChar"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test067-metadata.json
echo
echo "test068: dialect: invalid skipBlankRows"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test068-metadata.json
echo
echo "test069: dialect: invalid skipColumns"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test069-metadata.json
echo
echo "test070: dialect: invalid skipInitialSpace"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test070-metadata.json
echo
echo "test071: dialect: invalid skipRows"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test071-metadata.json
echo
echo "test072: dialect: invalid trim"
echo "warnings: If a property has a value that is not permitted by this specification, then if a default value is provided for that property, compliant applications MUST use that default value and MUST generate a warning. If no default value is provided for that property, compliant applications MUST generate a warning and behave as if the property had not been specified."
csvlint --schema=features/fixtures/csvw/test072-metadata.json
echo
echo "test073: invalid @language"
echo "warnings: The value of '@language' MUST be a valid 'BCP47' language code"
csvlint --schema=features/fixtures/csvw/test073-metadata.json
echo
echo "test074: empty tables"
echo "errors: Compliant application MUST raise an error if this array does not contain one or more 'table descriptions'."
csvlint --schema=features/fixtures/csvw/test074-metadata.json
echo
echo "test075: invalid tableGroup tableDirection"
echo "warnings: An atomic property that MUST have a single string value that is one of \"rtl\", \"ltr\" or \"auto\"."
csvlint --schema=features/fixtures/csvw/test075-metadata.json
echo
echo "test076: invalid table tableDirection"
echo "warnings: An atomic property that MUST have a single string value that is one of \"rtl\", \"ltr\" or \"auto\"."
csvlint --schema=features/fixtures/csvw/test076-metadata.json
echo
echo "test077: invalid tableGroup @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test077-metadata.json
echo
echo "test078: invalid table @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test078-metadata.json
echo
echo "test079: invalid schema @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test079-metadata.json
echo
echo "test080: invalid column @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test080-metadata.json
echo
echo "test081: invalid dialect @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test081-metadata.json
echo
echo "test082: invalid template @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test082-metadata.json
echo
echo "test083: invalid tableGroup @type"
echo "errors: If included '@type' MUST be 'TableGroup'"
csvlint --schema=features/fixtures/csvw/test083-metadata.json
echo
echo "test084: invalid table @type"
echo "errors: If included '@type' MUST be 'TableGroup'"
csvlint --schema=features/fixtures/csvw/test084-metadata.json
echo
echo "test085: invalid schema @type"
echo "errors: If included '@type' MUST be 'TableGroup'"
csvlint --schema=features/fixtures/csvw/test085-metadata.json
echo
echo "test086: invalid column @type"
echo "errors: If included '@type' MUST be 'TableGroup'"
csvlint --schema=features/fixtures/csvw/test086-metadata.json
echo
echo "test087: invalid dialect @type"
echo "errors: If included '@type' MUST be 'Dialect'"
csvlint --schema=features/fixtures/csvw/test087-metadata.json
echo
echo "test088: invalid transformation @type"
echo "errors: If included '@type' MUST be 'Template'"
csvlint --schema=features/fixtures/csvw/test088-metadata.json
echo
echo "test089: missing tables in TableGroup"
echo "errors: The 'tables' property is required in a 'TableGroup'"
csvlint --schema=features/fixtures/csvw/test089-metadata.json
echo
echo "test090: missing url in Table"
echo "errors: The 'url' property is required in a 'Table'"
csvlint --schema=features/fixtures/csvw/test090-metadata.json
echo
echo "test092: invalid JSON"
echo "errors: All compliant applications MUST generate errors and stop processing if a metadata document does not use valid JSON syntax"
csvlint --schema=features/fixtures/csvw/test092-metadata.json
echo
echo "test093: undefined properties"
echo "warnings: Compliant applications MUST ignore properties (aside from _common properties_) which are not defined in this specification and MUST generate a warning when they are encoutered"
csvlint --schema=features/fixtures/csvw/test093-metadata.json
echo
echo "test094: inconsistent array values: tables"
echo "warnings: Any items within an array that are not valid objects of the type expected are ignored"
csvlint --schema=features/fixtures/csvw/test094-metadata.json
echo
echo "test095: inconsistent array values: transformations"
echo "warnings: Any items within an array that are not valid objects of the type expected are ignored"
csvlint --schema=features/fixtures/csvw/test095-metadata.json
echo
echo "test096: inconsistent array values: columns"
echo "warnings: Any items within an array that are not valid objects of the type expected are ignored"
csvlint --schema=features/fixtures/csvw/test096-metadata.json
echo
echo "test097: inconsistent array values: foreignKeys"
echo "warnings: Any items within an array that are not valid objects of the type expected are ignored"
csvlint --schema=features/fixtures/csvw/test097-metadata.json
echo
echo "test098: inconsistent array values: tables"
echo "errors: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array. Compliant application MUST raise an error if this array does not contain one or more table descriptions."
csvlint --schema=features/fixtures/csvw/test098-metadata.json
echo
echo "test099: inconsistent array values: transformations"
echo "warnings: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array"
csvlint --schema=features/fixtures/csvw/test099-metadata.json
echo
echo "test100: inconsistent array values: columns"
echo "errors: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array"
csvlint --schema=features/fixtures/csvw/test100-metadata.json
echo
echo "test101: inconsistent array values: foreignKeys"
echo "warnings: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array"
csvlint --schema=features/fixtures/csvw/test101-metadata.json
echo
echo "test102: inconsistent link values: @id"
echo "warnings: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array"
csvlint --schema=features/fixtures/csvw/test102-metadata.json
echo
echo "test103: inconsistent link values: url"
echo "errors: If the supplied value of an array property is not an array (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been supplied with an empty array"
csvlint --schema=features/fixtures/csvw/test103-metadata.json
echo
echo "test104: invalid columnReference"
echo "errors: The referenced description object MUST have a name property"
csvlint --schema=features/fixtures/csvw/test104-metadata.json
echo
echo "test105: invalid primaryKey"
echo "warnings: The referenced description object MUST have a name property"
csvlint --schema=features/fixtures/csvw/test105-metadata.json
echo
echo "test106: invalid dialect"
echo "warnings: If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties."
csvlint --schema=features/fixtures/csvw/test106-metadata.json
echo
echo "test107: invalid tableSchema"
echo "errors: If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties."
csvlint --schema=features/fixtures/csvw/test107-metadata.json
echo
echo "test108: invalid reference"
echo "errors: If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties."
csvlint --schema=features/fixtures/csvw/test108-metadata.json
echo
echo "test109: titles with invalid language"
echo "errors: Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language. Validation fails because without a title, the metadata is incompatible with the CSV, which isn't a problem when not validating."
csvlint --schema=features/fixtures/csvw/test109-metadata.json
echo
echo "test110: titles with non-string values"
echo "warnings: Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language"
csvlint --schema=features/fixtures/csvw/test110-metadata.json
echo
echo "test111: titles with invalid value"
echo "errors: If the supplied value of a natural language property is not a string, array or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an empty array. Validation fails because without a title, the metadata is incompatible with the CSV, which isn't a problem when not validating."
csvlint --schema=features/fixtures/csvw/test111-metadata.json
echo
echo "test112: titles with non-string array values"
echo "warnings: If the supplied value is an array, any items in that array that are not strings MUST be ignored"
csvlint --schema=features/fixtures/csvw/test112-metadata.json
echo
echo "test113: invalid suppressOutput"
echo "warnings: Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type"
csvlint --schema=features/fixtures/csvw/test113-metadata.json
echo
echo "test114: invalid name"
echo "warnings: Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type"
csvlint --schema=features/fixtures/csvw/test114-metadata.json
echo
echo "test115: invalid virtual"
echo "warnings: Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type"
csvlint --schema=features/fixtures/csvw/test115-metadata.json
echo
echo "test116: file-metadata with query component not found"
echo "valid: processors MUST attempt to locate a metadata documents through site-wide configuration."
csvlint features/fixtures/csvw/test116.csv?query
echo
echo "test117: file-metadata not referencing file"
echo "warnings: If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored."
csvlint features/fixtures/csvw/test117.csv
echo
echo "test118: directory-metadata with query component"
echo "valid: processors MUST attempt to locate a metadata documents through site-wide configuration. component."
csvlint features/fixtures/csvw/test118/action.csv?query
echo
echo "test119: directory-metadata not referencing file"
echo "warnings: If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored."
csvlint features/fixtures/csvw/test119/action.csv
echo
echo "test120: link-metadata not referencing file"
echo "warnings: If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored."
csvlint features/fixtures/csvw/test120.csv
echo
echo "test121: user-metadata not referencing file"
echo "valid: User-specified metadata does not need to reference the starting CSV"
csvlint features/fixtures/csvw/test121.csv --schema=features/fixtures/csvw/test121-user-metadata.json
echo
echo "test122: link-metadata not describing file uses file-metadata"
echo "warnings: If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored."
csvlint features/fixtures/csvw/test122.csv
echo
echo "test123: file-metadata not describing file uses directory-metadata"
echo "warnings: If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored."
csvlint features/fixtures/csvw/test123/action.csv
echo
echo "test124: metadata with columns not matching csv titles"
echo "errors: If not validating, and one schema has a name property but not a titles property, and the other has a titles property but not a name property."
csvlint features/fixtures/csvw/tree-ops.csv --schema=features/fixtures/csvw/test124-user-metadata.json
echo
echo "test125: required column with empty cell"
echo "errors: If the column required annotation is true, add an error to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test125-metadata.json
echo
echo "test126: required column with cell matching null"
echo "errors: if the string is the same as any one of the values of the column null annotation, then the resulting value is null. If the column separator annotation is null and the column required annotation is true, add an error to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test126-metadata.json
echo
echo "test127: incompatible table"
echo "errors: if TM is not compatible with EM validators MUST raise an error, other processors MUST generate a warning and continue processing"
csvlint --schema=features/fixtures/csvw/test127-metadata.json
echo
echo "test128: duplicate column names"
echo "errors: The name properties of the column descriptions MUST be unique within a given table description."
csvlint --schema=features/fixtures/csvw/test128-metadata.json
echo
echo "test129: columnn name as integer"
echo "warnings: This (name) MUST be a string and this property has no default value, which means it MUST be ignored if the supplied value is not a string."
csvlint --schema=features/fixtures/csvw/test129-metadata.json
echo
echo "test130: invalid column name"
echo "warnings: column names are restricted as defined in Variables in [URI-TEMPLATE] "
csvlint --schema=features/fixtures/csvw/test130-metadata.json
echo
echo "test131: invalid column name"
echo "warnings: column names are restricted ... names beginning with '_' are reserved by this specification and MUST NOT be used within metadata documents."
csvlint --schema=features/fixtures/csvw/test131-metadata.json
echo
echo "test132: name annotation from title percent encoded"
echo "valid: If there is no name property defined on this column, the first titles value having the same language tag as default language, or und or if no default language is specified, becomes the name annotation for the described column. This annotation MUST be percent-encoded as necessary to conform to the syntactic requirements defined in [RFC3986]"
csvlint --schema=features/fixtures/csvw/test132-metadata.json
echo
echo "test133: virtual before non-virtual"
echo "errors: If present, a virtual column MUST appear after all other non-virtual column definitions."
csvlint --schema=features/fixtures/csvw/test133-metadata.json
echo
echo "test134: context in common property"
echo "errors: A metadata document MUST NOT add a new context"
csvlint --schema=features/fixtures/csvw/test134-metadata.json
echo
echo "test135: @list value"
echo "errors: Values MUST NOT use list objects or set objects."
csvlint --schema=features/fixtures/csvw/test135-metadata.json
echo
echo "test136: @set value"
echo "errors: Values MUST NOT use list objects or set objects."
csvlint --schema=features/fixtures/csvw/test136-metadata.json
echo
echo "test137: @type out of range (as datatype)"
echo "errors: The value of any @id or @type contained within a metadata document MUST NOT be a blank node."
csvlint --schema=features/fixtures/csvw/test137-metadata.json
echo
echo "test138: @type out of range (as node type)"
echo "errors: The value of any @id or @type contained within a metadata document MUST NOT be a blank node."
csvlint --schema=features/fixtures/csvw/test138-metadata.json
echo
echo "test139: @type out of range (as node type) - string"
echo "errors: The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL."
csvlint --schema=features/fixtures/csvw/test139-metadata.json
echo
echo "test140: @type out of range (as node type) - integer"
echo "errors: The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL."
csvlint --schema=features/fixtures/csvw/test140-metadata.json
echo
echo "test141: @id out of range (as node type) - bnode"
echo "errors: The value of any @id or @type contained within a metadata document MUST NOT be a blank node."
csvlint --schema=features/fixtures/csvw/test141-metadata.json
echo
echo "test142: @value with @language and @type"
echo "errors: If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value."
csvlint --schema=features/fixtures/csvw/test142-metadata.json
echo
echo "test143: @value with extra properties"
echo "errors: If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value."
csvlint --schema=features/fixtures/csvw/test143-metadata.json
echo
echo "test144: @language outside of @value"
echo "errors: A @language property MUST NOT be used on an object unless it also has a @value property."
csvlint --schema=features/fixtures/csvw/test144-metadata.json
echo
echo "test145: @value with invalid @language"
echo "errors: If a @language property is used, it MUST have a string value that adheres to the syntax defined in [BCP47], or be null."
csvlint --schema=features/fixtures/csvw/test145-metadata.json
echo
echo "test146: Invalid faux-keyword"
echo "errors: Aside from @value, @type, @language, and @id, the properties used on an object MUST NOT start with @."
csvlint --schema=features/fixtures/csvw/test146-metadata.json
echo
echo "test147: title incompatible with title on case"
echo "errors: If there is a non-empty case-sensitive intersection between the titles values, where matches MUST have a matching language; 'und' matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag."
csvlint --schema=features/fixtures/csvw/test147-metadata.json
echo
echo "test148: title incompatible with title on language"
echo "errors: If there is a non-empty case-sensitive intersection between the titles values, where matches MUST have a matching language; 'und' matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag."
csvlint --schema=features/fixtures/csvw/test148-metadata.json
echo
echo "test149: title compatible with title on less specific language"
echo "valid: If there is a non-empty case-sensitive intersection between the titles values, where matches MUST have a matching language; 'und' matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag."
csvlint --schema=features/fixtures/csvw/test149-metadata.json
echo
echo "test150: non-builtin datatype (datatype value)"
echo "warnings: If the value of this property is a string, it MUST be one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes or an absolute URL"
csvlint --schema=features/fixtures/csvw/test150-metadata.json
echo
echo "test151: non-builtin datatype (base value)"
echo "warnings: If the value of this property is a string, it MUST be one of the built-in datatypes"
csvlint --schema=features/fixtures/csvw/test151-metadata.json
echo
echo "test152: string format (valid combinations)"
echo "valid: If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values"
csvlint --schema=features/fixtures/csvw/test152-metadata.json
echo
echo "test153: string format (bad format string)"
echo "warnings: If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values"
csvlint --schema=features/fixtures/csvw/test153-metadata.json
echo
echo "test154: string format (value not matching format)"
echo "errors: If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values"
csvlint --schema=features/fixtures/csvw/test154-metadata.json
echo
echo "test155: number format (valid combinations)"
echo "valid: If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string"
csvlint --schema=features/fixtures/csvw/test155-metadata.json
echo
echo "test156: number format (bad format string)"
echo "warnings: If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string"
csvlint --schema=features/fixtures/csvw/test156-metadata.json
echo
echo "test157: number format (value not matching format)"
echo "errors: If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string"
csvlint --schema=features/fixtures/csvw/test157-metadata.json
echo
echo "test158: number format (valid combinations)"
echo "valid: Numeric dataype with object format"
csvlint --schema=features/fixtures/csvw/test158-metadata.json
echo
echo "test159: number format (bad pattern format string)"
echo "warnings: If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string"
csvlint --schema=features/fixtures/csvw/test159-metadata.json
echo
echo "test160: number format (not matching values with pattern)"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed"
csvlint --schema=features/fixtures/csvw/test160-metadata.json
echo
echo "test161: number format (not matching values without pattern)"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed"
csvlint --schema=features/fixtures/csvw/test161-metadata.json
echo
echo "test162: numeric format (consecutive groupChar)"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains two consecutive groupChar strings"
csvlint --schema=features/fixtures/csvw/test162-metadata.json
echo
echo "test163: integer datatype with decimalChar"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains the decimalChar, if the datatype base is integer or one of its sub-values"
csvlint --schema=features/fixtures/csvw/test163-metadata.json
echo
echo "test164: decimal datatype with exponent"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, if the datatype base is decimal or one of its sub-values"
csvlint --schema=features/fixtures/csvw/test164-metadata.json
echo
echo "test165: decimal type with NaN"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values"
csvlint --schema=features/fixtures/csvw/test165-metadata.json
echo
echo "test166: decimal type with INF"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values"
csvlint --schema=features/fixtures/csvw/test166-metadata.json
echo
echo "test167: decimal type with -INF"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values"
csvlint --schema=features/fixtures/csvw/test167-metadata.json
echo
echo "test168: decimal with implicit groupChar"
echo "valid: When parsing the string value of a cell against this format specification, implementations MUST recognise and parse numbers"
csvlint --schema=features/fixtures/csvw/test168-metadata.json
echo
echo "test169: invalid decimal"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test169-metadata.json
echo
echo "test170: decimal with percent"
echo "valid: Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell"
csvlint --schema=features/fixtures/csvw/test170-metadata.json
echo
echo "test171: decimal with per-mille"
echo "valid: Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell"
csvlint --schema=features/fixtures/csvw/test171-metadata.json
echo
echo "test172: invalid byte"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test172-metadata.json
echo
echo "test173: invald unsignedLong"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test173-metadata.json
echo
echo "test174: invalid unsignedShort"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test174-metadata.json
echo
echo "test175: invalid unsignedByte"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test175-metadata.json
echo
echo "test176: invalid positiveInteger"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test176-metadata.json
echo
echo "test177: invalid negativeInteger"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test177-metadata.json
echo
echo "test178: invalid nonPositiveInteger"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test178-metadata.json
echo
echo "test179: invalid nonNegativeInteger"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test179-metadata.json
echo
echo "test180: invalid double"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test180-metadata.json
echo
echo "test181: invalid number"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test181-metadata.json
echo
echo "test182: invalid float"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above"
csvlint --schema=features/fixtures/csvw/test182-metadata.json
echo
echo "test183: boolean format (valid combinations)"
echo "valid: If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by '|'."
csvlint --schema=features/fixtures/csvw/test183-metadata.json
echo
echo "test184: boolean format (bad format string)"
echo "warnings: If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by '|'."
csvlint --schema=features/fixtures/csvw/test184-metadata.json
echo
echo "test185: boolean format (value not matching format)"
echo "errors: If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by '|'."
csvlint --schema=features/fixtures/csvw/test185-metadata.json
echo
echo "test186: boolean format (not matching datatype)"
echo "errors: Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed"
csvlint --schema=features/fixtures/csvw/test186-metadata.json
echo
echo "test187: date format (valid native combinations)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test187-metadata.json
echo
echo "test188: date format (valid date combinations with formats)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test188-metadata.json
echo
echo "test189: date format (valid time combinations with formats)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test189-metadata.json
echo
echo "test190: date format (valid dateTime combinations with formats)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test190-metadata.json
echo
echo "test191: date format (bad format string)"
echo "errors: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test191-metadata.json
echo
echo "test192: date format (value not matching format)"
echo "errors: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test192-metadata.json
echo
echo "test193: duration format (valid combinations)"
echo "valid: If the datatype base is a duration type, the datatype format annotation provides a regular expression for the string values"
csvlint --schema=features/fixtures/csvw/test193-metadata.json
echo
echo "test194: duration format (value not matching format)"
echo "errors: If the datatype base is a duration type, the datatype format annotation provides a regular expression for the string values"
csvlint --schema=features/fixtures/csvw/test194-metadata.json
echo
echo "test195: values with matching length"
echo "valid: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test195-metadata.json
echo
echo "test196: values with wrong length"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test196-metadata.json
echo
echo "test197: values with wrong maxLength"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test197-metadata.json
echo
echo "test198: values with wrong minLength"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test198-metadata.json
echo
echo "test199: length < minLength"
echo "errors: Applications MUST raise an error if both length and minLength are specified and length is less than minLength. "
csvlint --schema=features/fixtures/csvw/test199-metadata.json
echo
echo "test200: length > maxLength"
echo "errors: Applications MUST raise an error if both length and maxLength are specified and length is greater than maxLength. "
csvlint --schema=features/fixtures/csvw/test200-metadata.json
echo
echo "test201: length on date"
echo "errors: Applications MUST raise an error if length, maxLength, or minLength are specified and the base datatype is not string or one of its subtypes, or a binary type."
csvlint --schema=features/fixtures/csvw/test201-metadata.json
echo
echo "test202: float matching constraints"
echo "valid: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test202-metadata.json
echo
echo "test203: float value constraint not matching minimum"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test203-metadata.json
echo
echo "test204: float value constraint not matching maximum"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test204-metadata.json
echo
echo "test205: float value constraint not matching minInclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test205-metadata.json
echo
echo "test206: float value constraint not matching minExclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test206-metadata.json
echo
echo "test207: float value constraint not matching maxInclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test207-metadata.json
echo
echo "test208: float value constraint not matching maxExclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test208-metadata.json
echo
echo "test209: date matching constraints"
echo "valid: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test209-metadata.json
echo
echo "test210: date value constraint not matching minimum"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test210-metadata.json
echo
echo "test211: date value constraint not matching maximum"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test211-metadata.json
echo
echo "test212: date value constraint not matching minInclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test212-metadata.json
echo
echo "test213: date value constraint not matching minExclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test213-metadata.json
echo
echo "test214: date value constraint not matching maxInclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test214-metadata.json
echo
echo "test215: date value constraint not matching maxExclusive"
echo "errors: validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell."
csvlint --schema=features/fixtures/csvw/test215-metadata.json
echo
echo "test216: minInclusive and minExclusive"
echo "errors: Applications MUST raise an error if both minInclusive and minExclusive are specified, or if both maxInclusive and maxExclusive are specified. "
csvlint --schema=features/fixtures/csvw/test216-metadata.json
echo
echo "test217: maxInclusive and maxExclusive"
echo "errors: Applications MUST raise an error if both minInclusive and minExclusive are specified, or if both maxInclusive and maxExclusive are specified. "
csvlint --schema=features/fixtures/csvw/test217-metadata.json
echo
echo "test218: maxInclusive < minInclusive"
echo "errors: Applications MUST raise an error if both minInclusive and maxInclusive are specified and maxInclusive is less than minInclusive, or if both minInclusive and maxExclusive are specified and maxExclusive is less than or equal to minInclusive."
csvlint --schema=features/fixtures/csvw/test218-metadata.json
echo
echo "test219: maxExclusive = minInclusive"
echo "errors: Applications MUST raise an error if both minInclusive and maxInclusive are specified and maxInclusive is less than minInclusive, or if both minInclusive and maxExclusive are specified and maxExclusive is less than or equal to minInclusive."
csvlint --schema=features/fixtures/csvw/test219-metadata.json
echo
echo "test220: maxExclusive < minExclusive"
echo "errors: Applications MUST raise an error if both minExclusive and maxExclusive are specified and maxExclusive is less than minExclusive, or if both minExclusive and maxInclusive are specified and maxInclusive is less than or equal to minExclusive."
csvlint --schema=features/fixtures/csvw/test220-metadata.json
echo
echo "test221: maxInclusive = minExclusive"
echo "errors: Applications MUST raise an error if both minExclusive and maxExclusive are specified and maxExclusive is less than minExclusive, or if both minExclusive and maxInclusive are specified and maxInclusive is less than or equal to minExclusive."
csvlint --schema=features/fixtures/csvw/test221-metadata.json
echo
echo "test222: string datatype with minimum"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test222-metadata.json
echo
echo "test223: string datatype with maxium"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test223-metadata.json
echo
echo "test224: string datatype with minInclusive"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test224-metadata.json
echo
echo "test225: string datatype with maxInclusive"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test225-metadata.json
echo
echo "test226: string datatype with minExclusive"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test226-metadata.json
echo
echo "test227: string datatype with maxExclusive"
echo "errors: Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type."
csvlint --schema=features/fixtures/csvw/test227-metadata.json
echo
echo "test228: length with separator"
echo "valid: If the value is a list, the constraint applies to each element of the list."
csvlint --schema=features/fixtures/csvw/test228-metadata.json
echo
echo "test229: matching minLength with separator"
echo "valid: If the value is a list, the constraint applies to each element of the list."
csvlint --schema=features/fixtures/csvw/test229-metadata.json
echo
echo "test230: failing minLength with separator"
echo "errors: If the value is a list, the constraint applies to each element of the list."
csvlint --schema=features/fixtures/csvw/test230-metadata.json
echo
echo "test231: single column primaryKey success"
echo "valid: As defined in [tabular-data-model], validators MUST check that each row has a unique combination of values of cells in the indicated columns."
csvlint --schema=features/fixtures/csvw/test231-metadata.json
echo
echo "test232: single column primaryKey violation"
echo "errors: Validators MUST raise errors if there is more than one row with the same primary key"
csvlint --schema=features/fixtures/csvw/test232-metadata.json
echo
echo "test233: multiple column primaryKey success"
echo "valid: As defined in [tabular-data-model], validators MUST check that each row has a unique combination of values of cells in the indicated columns."
csvlint --schema=features/fixtures/csvw/test233-metadata.json
echo
echo "test234: multiple column primaryKey violation"
echo "errors: Validators MUST raise errors if there is more than one row with the same primary key"
csvlint --schema=features/fixtures/csvw/test234-metadata.json
echo
echo "test235: rowTitles on one column"
echo "valid: if row titles is not null, insert any titles specified for the row. For each value, tv, of the row titles annotation"
csvlint --schema=features/fixtures/csvw/test235-metadata.json
echo
echo "test236: rowTitles on multiple columns"
echo "valid: if row titles is not null, insert any titles specified for the row. For each value, tv, of the row titles annotation"
csvlint --schema=features/fixtures/csvw/test236-metadata.json
echo
echo "test237: rowTitles on one column (minimal)"
echo "valid: if row titles is not null, insert any titles specified for the row. For each value, tv, of the row titles annotation"
csvlint --schema=features/fixtures/csvw/test237-metadata.json
echo
echo "test238: datatype value an absolute URL"
echo "warnings: it must be the name of one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes"
csvlint --schema=features/fixtures/csvw/test238-metadata.json
echo
echo "test242: datatype @id an absolute URL"
echo "valid: If included, @id is a link property that identifies the datatype described by this datatype description."
csvlint --schema=features/fixtures/csvw/test242-metadata.json
echo
echo "test243: invalid datatype @id"
echo "errors: It MUST NOT start with '_:'."
csvlint --schema=features/fixtures/csvw/test243-metadata.json
echo
echo "test244: invalid datatype @id"
echo "errors: It MUST NOT be the URL of a built-in datatype."
csvlint --schema=features/fixtures/csvw/test244-metadata.json
echo
echo "test245: date format (valid time combinations with formats and milliseconds)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test245-metadata.json
echo
echo "test246: date format (valid dateTime combinations with formats and milliseconds)"
echo "valid: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test246-metadata.json
echo
echo "test247: date format (extra milliseconds)"
echo "errors: The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification."
csvlint --schema=features/fixtures/csvw/test247-metadata.json
echo
echo "test248: Unicode in non-Normalized form"
echo "valid: No Unicode normalization (as specified in [UAX15]) is applied to these string values"
csvlint --schema=features/fixtures/csvw/test248-metadata.json
echo
echo "test249: http normalization"
echo "valid: When comparing URLs, processors MUST use Syntax-Based Normalization as defined in [[RFC3968]]. Processors perform Scheme-Based Normalization for HTTP (80) and HTTPS (443)"
csvlint features/fixtures/csvw/test249.csv --schema=features/fixtures/csvw/test249-user-metadata.json
echo
echo "test250: valid case"
echo "valid: As defined in [tabular-data-model], validators MUST check that, for each row, the combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test250-metadata.json
echo
echo "test251: missing source reference"
echo "errors: As defined in [tabular-data-model], validators MUST check that, for each row, the combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test251-metadata.json
echo
echo "test252: missing destination reference column"
echo "errors: As defined in [tabular-data-model], validators MUST check that, for each row, the combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test252-metadata.json
echo
echo "test253: missing destination table"
echo "errors: As defined in [tabular-data-model], validators MUST check that, for each row, the combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test253-metadata.json
echo
echo "test254: foreign key single column same table"
echo "valid: The combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test254-metadata.json
echo
echo "test255: foreign key single column different table"
echo "valid: The combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test255-metadata.json
echo
echo "test256: foreign key multiple columns"
echo "valid: The combination of cells in the referencing columns references a unique row within the referenced table through a combination of cells in the referenced columns."
csvlint --schema=features/fixtures/csvw/test256-metadata.json
echo
echo "test257: foreign key no referenced row"
echo "errors: Validators MUST raise errors for each row that does not have a referenced row for each of the foreign keys on the table in which the row appears"
csvlint --schema=features/fixtures/csvw/test257-metadata.json
echo
echo "test258: foreign key multiple referenced rows"
echo "errors: Validators MUST raise errors for each row that does not have a referenced row for each of the foreign keys on the table in which the row appears"
csvlint --schema=features/fixtures/csvw/test258-metadata.json
echo
echo "test259: tree-ops example with csvm.json (w3.org/.well-known/csvm)"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test259/tree-ops.csv
echo
echo "test260: tree-ops example with {+url}.json (w3.org/.well-known/csvm)"
echo "valid: Processors MUST use the first metadata found for processing a tabular data file by using overriding metadata, if provided. Otherwise processors MUST attempt to locate the first metadata document from the Link header or the metadata located through site-wide configuration."
csvlint features/fixtures/csvw/test260/tree-ops.csv
echo
echo "test261: maxLength < minLength"
echo "errors: Applications MUST raise an error if both minLength and maxLength are specified and minLength is greater than maxLength."
csvlint --schema=features/fixtures/csvw/test261-metadata.json
echo
echo "test263: @type on a common property can be a built-in type"
echo "valid: The value of any member of '@type' MUST be either a _term_ defined in [csvw-context], a _prefixed name_ where the prefix is a term defined in [csvw-context], or an absolute URL."
csvlint --schema=features/fixtures/csvw/test263-metadata.json
echo
echo "test264: @type on a common property can be a CURIE if the prefix is one of the built-in ones"
echo "valid: The value of any member of '@type' MUST be either a _term_ defined in [csvw-context], a _prefixed name_ where the prefix is a term defined in [csvw-context], or an absolute URL."
csvlint --schema=features/fixtures/csvw/test264-metadata.json
echo
echo "test266: 'null' contains an array of (valid) string & (invalid) numeric values"
echo "warnings: Processors MUST issue a warning if a property is set to an invalid value type"
csvlint --schema=features/fixtures/csvw/test266-metadata.json
echo
echo "test267: @id on datatype is invalid (eg starts with _:)"
echo "errors: It MUST NOT start with '_:' and it MUST NOT be the URL of a built-in datatype."
csvlint --schema=features/fixtures/csvw/test267-metadata.json
echo
echo "test268: 'base' missing on datatype (defaults to string)"
echo "valid: An atomic property that contains a single string: the name of one of the built-in datatypes, as listed above (and which are defined as terms in the default context). Its default is string."
csvlint --schema=features/fixtures/csvw/test268-metadata.json
echo
echo "test269: 'format' for a boolean datatype is a string but in the wrong form (eg YN)"
echo "errors: If the datatype base for a cell is 'boolean', the datatype format annotation provides the true value followed by the false value, separated by '|'. If the format does not follow this syntax, implementations MUST issue a warning and proceed as if no format had been provided."
csvlint --schema=features/fixtures/csvw/test269-metadata.json
echo
echo "test270: transformation includes an invalid property (eg foo)"
echo "warnings: All terms used within a metadata document MUST be defined in [csvw-context] defined for this specification"
csvlint --schema=features/fixtures/csvw/test270-metadata.json
echo
echo "test271: foreign key includes an invalid property (eg 'dc:description')"
echo "errors: A foreign key definition is a JSON object that must contain only the following properties. . ."
csvlint --schema=features/fixtures/csvw/test271-metadata.json
echo
echo "test272: foreign key reference includes an invalid property (eg 'dc:description')"
echo "errors: A foreign key definition is a JSON object that must contain only the following properties. . ."
csvlint --schema=features/fixtures/csvw/test272-metadata.json
echo
echo "test273: '@base' set in '@context' overriding eg CSV location"
echo "valid: If present, its value MUST be a string that is interpreted as a URL which is resolved against the location of the metadata document to provide the **base URL** for other URLs in the metadata document."
csvlint --schema=features/fixtures/csvw/test273-metadata.json
echo
echo "test274: '@context' object includes properties other than '@base' and '@language'"
echo "errors: The '@context' MUST have one of the following values: An array composed of a string followed by an object, where the string is 'http://www.w3.org/ns/csvw' and the object represents a local context definition, which is restricted to contain either or both of the following members."
csvlint --schema=features/fixtures/csvw/test274-metadata.json
echo
echo "test275: property acceptable on column appears on table group"
echo "warnings: Table Group may only use defined properties."
csvlint --schema=features/fixtures/csvw/test275-metadata.json
echo
echo "test276: property acceptable on column appears on table"
echo "warnings: Table may only use defined properties."
csvlint --schema=features/fixtures/csvw/test276-metadata.json
echo
echo "test277: property acceptable on table appears on column"
echo "warnings: Column may only use defined properties."
csvlint --schema=features/fixtures/csvw/test277-metadata.json
echo
echo "test278: CSV has more headers than there are columns in the metadata"
echo "errors: Two schemas are compatible if they have the same number of non-virtual column descriptions, and the non-virtual column descriptions at the same index within each are compatible with each other."
csvlint --schema=features/fixtures/csvw/test278-metadata.json
echo
echo "test279: duration not matching xsd pattern"
echo "errors: Value MUST be a valid xsd:duration."
csvlint --schema=features/fixtures/csvw/test279-metadata.json
echo
echo "test280: dayTimeDuration not matching xsd pattern"
echo "errors: Value MUST be a valid xsd:dayTimeDuration."
csvlint --schema=features/fixtures/csvw/test280-metadata.json
echo
echo "test281: yearMonthDuration not matching xsd pattern"
echo "errors: Value MUST be a valid xsd:yearMonthDuration."
csvlint --schema=features/fixtures/csvw/test281-metadata.json
echo
echo "test282: valid number patterns"
echo "valid: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test282-metadata.json
echo
echo "test283: valid number patterns (signs and percent/permille)"
echo "valid: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test283-metadata.json
echo
echo "test284: valid number patterns (grouping)"
echo "valid: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test284-metadata.json
echo
echo "test285: valid number patterns (fractional grouping)"
echo "valid: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test285-metadata.json
echo
echo "test286: invalid ##0 1,234"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test286-metadata.json
echo
echo "test287: invalid ##0 123.4"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test287-metadata.json
echo
echo "test288: invalid #,#00 1"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test288-metadata.json
echo
echo "test289: invalid #,#00 1234"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test289-metadata.json
echo
echo "test290: invalid #,#00 12,34"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test290-metadata.json
echo
echo "test291: invalid #,#00 12,34,567"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test291-metadata.json
echo
echo "test292: invalid #,##,#00 1"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test292-metadata.json
echo
echo "test293: invalid #,##,#00 1234"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test293-metadata.json
echo
echo "test294: invalid #,##,#00 12,34"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test294-metadata.json
echo
echo "test295: invalid #,##,#00 1,234,567"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test295-metadata.json
echo
echo "test296: invalid #0.# 12.34"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test296-metadata.json
echo
echo "test297: invalid #0.# 1,234.5"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test297-metadata.json
echo
echo "test298: invalid #0.0 1"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test298-metadata.json
echo
echo "test299: invalid #0.0 12.34"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test299-metadata.json
echo
echo "test300: invalid #0.0# 1"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test300-metadata.json
echo
echo "test301: invalid #0.0# 12.345"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test301-metadata.json
echo
echo "test302: invalid #0.0#,# 1"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test302-metadata.json
echo
echo "test303: invalid #0.0#,# 12.345"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test303-metadata.json
echo
echo "test304: invalid #0.0#,# 12.34,567"
echo "errors: A number format pattern as defined in [UAX35]. Implementations MUST recognise number format patterns containing the symbols '0', '#', the specified decimalChar (or '.' if unspecified), the specified groupChar (or ',' if unspecified), 'E', '+', '%' and '&permil;'."
csvlint --schema=features/fixtures/csvw/test304-metadata.json
echo
echo "test305: multiple values with same subject and property (unordered)"
echo "valid: Values in separate columns using the same propertyUrl are kept in proper relative order."
csvlint --schema=features/fixtures/csvw/test305-metadata.json
echo
echo "test306: multiple values with same subject and property (ordered)"
echo "valid: Values in separate columns using the same propertyUrl are kept in proper relative order."
csvlint --schema=features/fixtures/csvw/test306-metadata.json
echo
echo "test307: multiple values with same subject and property (ordered and unordered)"
echo "valid: Values in separate columns using the same propertyUrl are kept in proper relative order."
csvlint --schema=features/fixtures/csvw/test307-metadata.json
echo
echo "test308: invalid datatype string"
echo "errors: If the value of the datatype property is a string, it must be one of the built-in datatypes."
csvlint --schema=features/fixtures/csvw/test308-metadata.json
echo
